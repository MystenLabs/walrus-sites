name: "Deploy Walrus Site"
description: "Deploys a site to Walrus and publishes it as a webpage"
inputs:
    # Setup Walrus action inputs:
    SUI_ADDRESS:
        description: The Sui address to use.
        required: true
    SUI_KEYSTORE:
        description: The content of the Sui keystore file.
        required: true
    WALRUS_CONFIG:
        description: The content of the Walrus configuration file. If not provided, it will be downloaded from the Walrus repository.
        required: false
    SUI_NETWORK:
        description: The Sui network to use.
        default: mainnet
    # Deploy site action inputs:
    DIST_FOLDER:
      description: Path to the directory with the built site.
      required: true
    SITE_BUILD_COMMANDS:
      description: "Optional commands to run before deployment, typically for building the site. You can use separate steps in your workflow for building instead."
      required: false
    SITES_CONFIG:
      description: The content of the sites-config.yaml file. If not provided, it will be downloaded from the walrus-sites repository.
      required: false
    WS_RESOURCES:
      description: "Full-path to the 'ws-resources.json' file. Note site-builder defaults to searching for 'ws-resources.json' directly inside the `DIST_FOLDER`."
      required: false
    EPOCHS:
        description: Epochs to keep
        required: false
        default: "5"
    GITHUB_TOKEN:
        description: The GITHUB_TOKEN for creating a PR, in case of ws-resources changed during site-publishing. If not provided, the PR creation step will be skipped.
        required: false

runs:
    using: "composite"
    steps:
        - name: Prepare Walrus Config
          id: walrus_config_step
          shell: bash
          run: |
            if [[ -n "${{ inputs.WALRUS_CONFIG }}" ]]; then
              CONFIG_CONTENT="${{ inputs.WALRUS_CONFIG }}"
            else
              CONFIG_CONTENT=$(curl -sL https://raw.githubusercontent.com/MystenLabs/walrus/refs/heads/main/setup/client_config.yaml)
            fi
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "walrus_config<<$EOF" >> "$GITHUB_OUTPUT"
            echo "$CONFIG_CONTENT" >> "$GITHUB_OUTPUT"
            echo "$EOF" >> "$GITHUB_OUTPUT"
        - name: Setup Walrus
          uses: "MystenLabs/walrus/.github/actions/set-up-walrus/@ae35f928a5e214df7f22796e9375d575a8c0ca09" # pin@main
          with:
              SUI_ADDRESS: "${{ inputs.SUI_ADDRESS }}"
              SUI_KEYSTORE: "${{ inputs.SUI_KEYSTORE }}"
              WALRUS_CONFIG: "${{ steps.walrus_config_step.outputs.walrus_config }}"
              SUI_NETWORK: "${{ inputs.SUI_NETWORK }}"
        - name: Build the site
          if: inputs.SITE_BUILD_COMMANDS != ''
          run: |
            ${{ inputs.SITE_BUILD_COMMANDS }}
          shell: bash
        - name: Prepare Sites Config
          run: |
            if [[ -n "${{ inputs.SITES_CONFIG }}" ]]; then
              echo "${{ inputs.SITES_CONFIG }}" > sites-config.yaml
            else
              curl -sL https://raw.githubusercontent.com/MystenLabs/walrus-sites/refs/heads/mainnet/sites-config.yaml -o sites-config.yaml
            fi
          shell: bash
        - name: "Deploy the site"
          run: |
            ARGS=(
              --context "${{ inputs.SUI_NETWORK }}"
              --config sites-config.yaml
              deploy ${{ inputs.DIST_FOLDER }}
              --epochs "${{ inputs.EPOCHS }}"
            )
            if [[ -n "${{ inputs.WS_RESOURCES }}" ]]; then
              ARGS+=(--ws-resources "${{ inputs.WS_RESOURCES }}")
            fi
            site-builder "${ARGS[@]}"
          shell: bash
        - name: Set ws-resources path
          id: ws_path
          if: inputs.GITHUB_TOKEN != ''
          shell: bash
          run: |
            if [[ -n "${{ inputs.WS_RESOURCES }}" ]]; then
              echo "path=${{ inputs.WS_RESOURCES }}" >> "$GITHUB_OUTPUT"
            else
              echo "path=${{ inputs.DIST_FOLDER }}/ws-resources.json" >> "$GITHUB_OUTPUT"
            fi
        - name: Detect if there was any change in ws-resources
          id: file_change
          if: inputs.GITHUB_TOKEN != ''
          run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            if [[ -n "$(git status --porcelain -- ${{ steps.ws_path.outputs.path }})" ]]; then
              echo "changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "changed=false" >> "$GITHUB_OUTPUT"
            fi
          shell: bash
        - name: Inform whether there was any change in ws-resources
          run: echo "${{ steps.ws_path.outputs.path }} has changed: ${{ steps.file_change.outputs.changed }} and GITHUB_TOKEN is something: $( [[ -n "${{ inputs.GITHUB_TOKEN }}" ]] && echo "yes" || echo "no" )"
        - name: Commit and Push changes
          if: inputs.GITHUB_TOKEN != '' && steps.file_change.outputs.changed == 'true'
          run: |
            git add ${{ steps.ws_path.outputs.path }}
            git commit -m "ci: Update ${{ steps.ws_path.outputs.path }} after deployment"
            git push origin HEAD:update-ws-resources-${{ github.run_id }}
          shell: bash
        - name: Create Pull Request
          if: inputs.GITHUB_TOKEN != '' && steps.file_change.outputs.changed == 'true'
          uses: peter-evans/create-pull-request@v6
          with:
            token: ${{ inputs.GITHUB_TOKEN }}
            branch: update-ws-resources-${{ github.run_id }}
            title: "ci: Update ${{ steps.ws_path.outputs.path }} after deployment"
            body: "This PR was created because ws-resources file was updated during deployment"
